import numpy as np
import pandas as pd
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score
epilepsy_data = pd.read_csv('/content/EpilepsyB.csv')
from sklearn.utils import resample
#create two different dataframe of majority and minority class 
df_majority = epilepsy_data[(epilepsy_data['Status']==0)] 
df_minority = epilepsy_data[(epilepsy_data['Status']==1)] 
# upsample minority class
df_minority_upsampled = resample(df_minority, 
                                 replace=True,    # sample with replacement
                                 n_samples= 9200, # to match majority class
                                 random_state=42)  # reproducible results
# Combine majority class with upsampled minority class
df_upsampled = pd.concat([df_minority_upsampled, df_majority])
X = epilepsy_data.drop(columns=['Name','y','Status'], axis=1)
Y = epilepsy_data['Status']
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.4, random_state=2)
scaler = StandardScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)

X_test = scaler.transform(X_test)
model = svm.SVC(kernel='poly')
model.fit(X_train, Y_train)
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy score of training data : ', training_data_accuracy)
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy score of test data : ', test_data_accuracy)
input_data = (-167,	-230,	-280,	-315,	-338,	-369,	-405,	-392,	-298,	-140)
# changing input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)


if (prediction[0] == 0):
  print("The Person does not have Epilepsy")

else:
  print("The Person has Epilepsy")
  
import pickle
!pip install streamlit
import streamlit as st
filename = 'epilepsy_model.sav'
pickle.dump(model, open(filename, 'wb'))
loaded_model = pickle.load(open('epilepsy_model.sav', 'rb'))
st.title("Epilepsy Prediction using ML")
    
col1, col2, col3, col4, col5 = st.columns(5)  
    
with col1:
        EEG_after_1_second = st.text_input('X1')
        
with col2:
        EEG_after_2_second = st.text_input('X2')
        
with col3:
        EEG_after_3_second = st.text_input('X3')
        
with col4:
        EEG_after_4_second = st.text_input('X4')
        
with col5:
        EEG_after_5_second = st.text_input('X5')
        
with col1:
        EEG_after_6_second = st.text_input('X6')
        
with col2:
        EEG_after_7_second = st.text_input('X7')
        
with col3:
        EEG_after_8_second = st.text_input('X8')
        
with col4:
        EEG_after_9_second = st.text_input('X9')
        
with col5:
        EEG_after_10_second = st.text_input('X10')

    # code for Prediction
epilepsy_diagnosis = ''
    
    # creating a button for Prediction    
if st.button("Epilepsy Result"):
        epilepsy_prediction = epilepsy_model.predict([[X1, X2, X3, X4, X5, X6, X7, X8, X9, X10]])
        if (epilepsy_prediction[0] == 0):
          epilepsy_diagnosis = "The person does not have Epilepsy"
        else:
         epilepsy_diagnosis = "The person has Epilepsy"
        
st.success(epilepsy_diagnosis)
